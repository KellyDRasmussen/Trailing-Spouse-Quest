:: StoryTitle
Trailing Spouse Experience


:: StoryData
{
  "ifid": "ED99C4B6-BE1A-4F72-9D0A-56B1BD9F1894",
  "format": "SugarCube",
  "format-version": "2.37.3",
  "start": "Arrival",
  "zoom": 0.6
}


:: Arrival {"position":"700,100","size":"100,100"}
You arrive in Denmark with your family. Things are so nice here! 

You are filling in your immigration paperwork.

Navn. That's got to be "Name", right?

[[Sywia Piwka|Choice_Sywia]]
[[Nina Ahmed|Choice_Nina]]
[[Olivia Jensen|Choice_Olivia]]




:: BuJo_Regular {"position":"1100,600","size":"100,100"}
<<if $firstmonth==false>>
<h3>Reflections</h3><<include "BujoReflections">>
<hr>
<</if>>
<h3>Plans</h3><<include "BujoPlans">>
<hr>
<h3>Opportunities</h3><<include "BujoOpportunities">>
<hr>
[[Close the book->KitchenTable]]




:: BujoOpportunities {"position":"1000,700","size":"100,100"}
<<if $bujoOpportunities.length > 0>>
  <<for _opp range $bujoOpportunities>>
    <<set _alreadyPlanned = $bujoPlans.some(p => p.id === _opp.id)>>
    <div class="opportunity-item">
      <strong><<=_opp.label>></strong><br>
      <span class="time-cost">Time commitment: <<print Math.round(_opp.timeCost * 100)>>%</span>
      
      <<if !_alreadyPlanned && $timeBucket + _opp.timeCost <= 1.0>>
        <<link "Commit to this">>
          <<run setup.commitPlan(_opp)>>
        <</link>>
      <<elseif _alreadyPlanned>>
        <span class="already-planned">Already planned</span>
      <<elseif $timeBucket + _opp.timeCost > 1.0>>
        <span class="too-busy">Jo said not to over-commit</span>
      <</if>>
    </div>
  <</for>>
<<else>>
  <p><em>No opportunities right now. I'm sure something will show up.</em></p>
<</if>>


:: BujoPlans {"position":"1100,700","size":"100,100"}
\:: BujoPlans
<p><em><<print setup.getBujoIntro($application_state, $changedmind)>></em></p>

<<if $bujoPlans.length > 0>>
<h3>Month Events:</h3>
  <<for _plan range $bujoPlans>>
    <p><strong><<=_plan.label>></strong><br></p>
  <</for>>
<<else>>
  <p><em>Month Events:</em></p>
<</if>>

/* Time Usage Indicator */
<div class="time-meter">
  <div class="time-label">Time available this month: <<print Math.round((1.0 - $timeBucket) * 100)>>%</div>
  <div class="time-bar">
    <div class="time-filled" style="width: <<print Math.min($timeBucket * 100, 100)>>%;"></div>
  </div>
</div>

<<if $timeBucket >= 0.6>>
  <div class="time-alert">
    <p> Are you sure you want to commit your energy to these opportunities?</p>
    <<link "Yes, let's see how it goes">>
      <<goto "MonthTransition">>
    <</link>> | 
    <<link "No, wait">>
      <<goto "ReviseMonthPlans">>
    <</link>>
  </div>
<<elseif $timeBucket >= 0.75>>
  <p><em>Your calendar is seriously filling up.</em></p>
<</if>>




:: BujoReflections {"position":"900,700","size":"100,100"}
<<if $monthReflections && $monthReflections.length>>
  <<for _reflection range $monthReflections>>
    <div class="reflection-entry">
      <p><<=_reflection>></p>
    </div>
  <</for>>
<<else>>
  <p><em>No reflections yet. Still processing</em></p>
<</if>>


:: Choice_Nina {"position":"700,300","size":"100,100"}
Great. One question down. Two more pages to go.
<<silently>>
<<set $luck to 0.1>>
<<set $playername = "Nina Ahmed">>
<<set $firstname = "Nina">>
<<set $nickname = "Neens">>
<<set $momnickname = "Nounou">>
<</silently>>
[[Finish this off later->KitchenTable]]


:: Choice_Olivia {"position":"900,300","size":"100,100"}
Great. One question down. Two more pages to go.
<<silently>>
<<set $luck to 0.5>>
<<set $playername = "Olivia Jensen">>
<<set $firstname = "Olivia">>
<<set $nickname = "Liv">>
<<set $momnickname = "Livvy-Lou">>
<</silently>>
[[Finish this off later->KitchenTable]]


:: Choice_Sywia {"position":"500,300","size":"100,100"}
Great. One question down. Two more pages to go.  
<<silently>>
<<set $luck to 0.2>>
<<set $playername = "Sywia Piwka">>
<<set $firstname = "Sylwia">>
<<set $nickname = "Sylwu≈õ">>
<<set $momnickname = "Sylunia">>
<</silently>>
[[Finish this off later->KitchenTable]]


:: Email {"position":"2100,1000","size":"100,100"}
<<set _inbox = setup.inbox.filter(e => !e.showIf || e.showIf())>>

<<if _inbox.length == 0>>
  <p><em>Inbox zero. Ahhhh.</em></p>
<</if>>

<<if _inbox.length > 0>>
  <<for _email range _inbox>>
    <div class="message-card email">
      <div class="email-header">
        <strong>From:</strong> <<=_email.sender>><br>
        <strong>Subject:</strong> <<=_email.subject>>
      </div>
      <div class="message-body">
        <<print _email.body.replace("{{playername}}", $playername)>>
        
      </div>
    </div>

    <<if _email.linkedOpportunityId>>
      <<set _opp = $allOpportunities.find(o => o.id == _email.linkedOpportunityId)>>
      <<if _opp>>
        <<if _opp.forced and !$bujoPlans.includes(_opp)>>
          <<set $bujoPlans.push(_opp)>>
          <<set $timeBucket += _opp.timeCost>>
        <<elseif !$bujoOpportunities.includes(_opp)>>
          <<set $bujoOpportunities.push(_opp)>>
        <</if>>
      <</if>>
    <</if>>

  <</for>>
<</if>>

[[Close the mail program ->Laptop]]



:: First_BuJo {"position":"1100,400","size":"100,100"}
<<silently>><<if $socialMediaInitialised==false>>
  <<include "_SoMe_init">> 
  <<set setup.instaFeed = setup.allSocialPosts>>
  <<set $socialMediaInitialised = true>>
<</if>>
<<include "_email_init">>
<</silently>>
A brand new bullet journal. The possibilities are endless.

GroupChat pings. Your life coach is checking in, as requested.  
<div class="chat-bubble">

Jen:

<<= $firstname>>, don‚Äôt commit your energy to things immediately üí´ 
Write invitations down üìù then choose üå±.  

</div>
<<set $newbujo=1>>
[[Close the book->KitchenTable]]



:: GroupChat {"position":"600,900","size":"100,100"}
<<for _i to 0; _i < $groupMessages.length; _i++>>
  <<set _msg = $groupMessages[_i]>>
  <div class="chat-bubble">
    <strong><<print _msg.sender>>:</strong> <<print _msg.content>>
  </div>
<</for>>


<<if $newbujo==1>>
<div class="chat-bubble">
<strong>
Jen:

<<= $firstname>>, don‚Äôt commit your energy to things immediately üí´ 
Write invitations down üìù then choose üå±.  
</strong>
</div>
<</if>>
[[Back to home screen ->Phone]] 



:: Intra {"position":"300,700","size":"100,100"}



:: JobBoard {"position":"1600,800","size":"100,100"}
<<silently>>
<<set $jobOptions = [
  {label: "More than one a day", id: "ft", time: 0.7, luck: 0, text: "Alright, let's update the old BuJo"},
  {label: "A couple a week", id: "pt", time: 0.3, luck: 0.2, text: "I'll block off some time in the BuJo"},
  {label: "One a week", id: "vpt", time: 0.1, luck: 0.2, text: "I'll make a plan in the BuJo"},
  {label: "Not this month", id: "nope", time: 0, luck: 0.5, text: "Gonna write that down in the BuJo"}
]>>
<</silently>>
<p>How many job applications will you send out?</p>
<<for _i = 0; _i < $jobOptions.length; _i++>>
  <<capture _i>>
    <<link $jobOptions[_i].label>>
      <<set $jobPickedOption = $jobOptions[_i]>>
      <<goto "JobConfirm">>
    <</link>><br>
  <</capture>>
<</for>>


:: JobConfirm {"position":"1500,800","size":"100,100"}
<<if $jobPickedOption>>
  <<run setup.jobhuntSelect($jobPickedOption.id, $jobPickedOption.time, $jobPickedOption.luck, $jobPickedOption.text)>>
  <p><<print $jobPickedOption.text>></p>
<<else>>
  <p>Something went wrong with your selection. Please try again.</p>
<</if>>

[[Back to BuJo->BuJo_Regular]]


:: KitchenTable {"position":"600,500","size":"100,100"}
<<silently>>
  <<include "_groupchat_init">>
<</silently>>
<<if $introSeen == false>>
  You pack your kids off to school and your partner off to work. You sit down at your kitchen table and set up your workspace.

  You have a laptop, a mobile phone and your brand new bullet journal.
  <<set $introSeen = true>>
<</if>>
<<if $advance>>
  <<run setup.resetMonth()>>
<</if>>
- [[Open the laptop->Laptop]]
- [[Check your phone->Phone]]
<<if $newbujo == 0>>- [[Open your journal->First_BuJo]]<</if>>
<<if $newbujo == 1>>- [[Open your journal->BuJo_Regular]]<</if>>



:: Laptop {"position":"2100,700","size":"100,100"}
<<if !$socialMediaInitialised>>
[[Email ->Email]]
[[That's enough internet for now->KitchenTable]]
<<elseif $firstmonth>>
[[Job hunting times ->JobBoard]]
[[Email ->Email]]
[[That's enough internet for now->KitchenTable]]
<<else>>
[[Job hunting times ->JobBoard]]
[[Just check my email real quick ->Email]]
[[That's enough internet for now->KitchenTable]]
<</if>>



:: MonthTransition {"position":"1100,900","size":"100,100"}
<h2>That's <<print $month || 1>> planned then</h2>

<p>It's time to pick the kids up from school.</p>


<<run setup.generateMonthReflections()>>

<<link "Open your Bullet Journal to the new month">>
  <<run setup.startNewMonth()>>
  <<goto "BuJo_Regular">>
<</link>>


:: Phone {"position":"600,700","size":"100,100"}
<<if $firstmonth=true>>
Let's see what's going on with your friends and family.
[[What's new in the feeds? ->SoMe]]
[[Check in on the groupchats ->GroupChat]]
[[Put phone down->KitchenTable]]
<<elseif $firstmonth=false>>
Let's see what's going on outside in the real world.
[[See how the kids' teachers are doing -->Intra]]
[[What's new in the feeds? ->SoMe]]
[[Check in on the groupchats ->GroupChat]]
[[Put phone down->KitchenTable]]
<</if>>



:: ReviseMonthPlans {"position":"1200,900","size":"100,100"}
<h2>Revising Your Plans</h2>

<p>You look at your Bullet Journal and consider what you might want to change.</p>

<<if $bujoPlans.length > 0>>
  <h3>Your Current Plans:</h3>
  <<for _i = 0; _i < $bujoPlans.length; _i++>>
    <<capture _i>>
      <div class="plan-item">
        <strong><<==$bujoPlans[_i].label>></strong>
        <<link "‚úñ">>
          <<run setup.removePlan(_i)>>
          <<replace "#plans-list">><<include "ReviseMonthPlans">><</replace>>
        <</link>>
      </div>
    <</capture>>
  <</for>>
<<else>>
  <p><em>You have no plans yet. </em></p>
<</if>>

<div class="time-meter">
  <div class="time-label">Time available: <<print Math.round((1.0 - $timeBucket) * 100)>>%</div>
  <div class="time-bar">
    <div class="time-filled" style="width: <<print Math.min($timeBucket * 100, 100)>>%;"></div>
  </div>
</div>

[[Return to your Bullet Journal->BuJo_Regular]]


:: SoMe {"position":"400,800","size":"100,100"}
<<if !setup.allSocialPosts>>
  <p>Your family is having a lovely get together at your auntie's house. You click through the photos. You have a look at what your best friend is up to. She's having a nice holiday.</p>

  <p>Your post of your children standing in front of the door on their way to their first day of school has received 15 internet points.</p>

  [[Back->Phone]]

<<else>>
<<silently>>
  <<if !setup.instaFeedInitialised>>
    <<set setup.instaFeed = setup.allSocialPosts.filter(p => p.tags.includes("august"))>>
    <<set setup.instaFeedIndex = 0>>
    <<set setup.instaFeedInitialised = true>>
  <</if>>

  <<set _post = setup.instaFeed[setup.instaFeedIndex]>>

<<if _post.tags.includes("opportunity") and !_post.seen>>
  <<set _opp = $allOpportunities.find(o => o.linkId == _post.linkId)>>
  <<if _opp and !$bujoOpportunities.includes(_opp)>>
    <<set $bujoOpportunities.push(_opp)>>
  <</if>>
  <<set _post.seen = true>>
<</if>>
<</silently>>
  <div class="message-card social">
    <div class="social-post">
      <strong>@<<=_post.author>></strong>
    </div>
    <div class="message-body"><<=_post.caption>></div>
  </div>

  <<link "Next Post">>
    <<set setup.instaFeedIndex = (setup.instaFeedIndex + 1) % setup.instaFeed.length>>
    <<goto "SoMe">>
  <</link>>

  [[Back to home screen->Phone]]

<</if>>



:: StoryHeader {"position":"100,100","size":"100,100"}
<link href="https://fonts.googleapis.com/css2?family=Caveat&display=swap" rel="stylesheet">



:: StoryInit {"position":"100,0","size":"100,100"}
<<set $cashFlow = 0.5>>
<<set $momnickname = "honey">>
<<set $connectedness = 0>>
<<set $purpose = 0>>
<<set $leisure = 0>>
<<set $boundaries = 0>>
<<set $introSeen = false>>
<<set $appsSent = 0>>
<<set $emailList = []>>
<<set $unreadEmails = 0>>
<<set $groupMessages = []>>
<<set $unreadWhatsApp = 0>>
<<set $activities = false>>
<<set $firstmonth = true>>
<<set $application_state ="">>
<<set $newbujo=0>>
<<set $mummessage=true>>
<<set $socialMediaInitialised=false>>
<<set $advance=false>>

<<set $StoryInitHasRun = true>>

<<set $bujoOpportunities = []>>
<<set $bujoPlans = []>>
<<set $timeBucket = 0>>

<<set $provisionalTime = 0>>
<<set $month = 1>>
<<set $timeLog = {}>>

<<set $jobOptions = [
  {label: "More than one a day", id: "ft", time: 0.7, luck: 0, text: "Alright, let's update the old BuJo"},
  {label: "A couple a week", id: "pt", time: 0.3, luck: 0.2, text: "I'll block off some time in the BuJo"},
  {label: "One a week", id: "vpt", time: 0.1, luck: 0.2, text: "I'll make a plan in the BuJo"},
  {label: "Not this month", id: "nope", time: 0, luck: 0.5, text: "Gonna write that down in the BuJo"}
]>>


<<set $allOpportunities = [

  {
    id: "oppo_networking_01",
    linkId: "networking_01",
    label: "Go to coffee club",
    timeCost: 0.1,
    prose: "An informal coffee meetup.",
    tags: ["august", "opportunity"]
  },

  {
    id: "oppo_course_01",
    linkId: "course_01",
    label: "Sign up for course",
    timeCost: 0.1,
    prose: "A course with a certificate at the end",
    tags: ["august", "opportunity"]
  },

  {
    id: "oppo_bureaucracy_01",
    linkId: "bureaucracy_01",
    label: "Get an appointment at SIRI for the whole family",
    timeCost: 0.1,
    prose: "",
    tags: ["email", "opportunity"],
    forced: true
  },
  {
	id: "oppo_dansk_01",
    linkId: "dansk_01",
    label: "Sprogtest? Like... what? A language test??",
    timeCost: 0.1,
    prose: "Sounds like I need to have my Danish assessed. That should be quick.",
    tags : ["email", "opportunity"]
}

]>>





:: _SoMe_init {"position":"500,800","size":"100,100"}
<<set setup.allSocialPosts = [

  {
    id: "insta_kidscute_01",
    linkId: "kidscute_01",
    author: "sister_life",
    caption: "I love my waterbabies üåä‚òÄÔ∏è #BeachLife",
    tags: ["family", "comparison", "august"]
  },

  {
    id: "insta_danceparty_01",
    linkId: "danceparty_01",
    author: "Life_oh_Life",
    caption: "5-min dance party. Starts now!",
    tags: ["nervous_system", "relief", "august"],
    relief: true
  },

  {
    id: "insta_networking_event_01",
    linkId: "networking_01",
    author: "international_hub",
    caption: "Join us for the best Coffee Club in town (every Friday‚òïÔ∏è)",
    tags: ["opportunity", "networking", "august"],
    luckBoost: 0.2
  },

  {
    id: "insta_course_ux_01",
    linkId: "course_01",
    author: "Flourish_DK",
    caption: "Want to break into the Danish labour market? Free places available.",
    tags: ["opportunity", "course", "august"],
    luckBoost: 0.3
  },

  {
    id: "insta_smugfriend_01",
    linkId: "smugfriend_01",
    author: "viking_life_forever",
    caption: "When you can't remember if you emailed in Danish or English to your colleagues and they actually understood you ü•πüíº #dansk",
    tags: ["comparison", "language", "august"]
  },

  {
    id: "insta_algoadvice_01",
    linkId: "algoadvice_01",
    author: "mindset_guru",
    caption: "‚ú®If you don't like your life you should change it. Happiness is a CHOICE",
    tags: ["shamebait",  "august"]
  }

]>>




:: _email_init {"position":"2200,1000","size":"100,100"}
<<set setup.inbox = [
  {
    id: "email_relo_coach_01",
    sender: "Settling In Service",
    subject: "Important First Steps for Internationals",
body: "Hey {{playername}}, remember that you must make appointments for the whole family to have your fingerprints taken at the Citizens Center.\nAll the best, \nJulie",
    linkedOpportunityId: "oppo_bureaucracy_01",
    month: 1,
    tags: ["settling", "bureaucracy", "august"],
    forced: true
  },
  {
    id: "email_danish_school_01",
    sender: "Sprogskole",
    subject: "Tilmeld dig til dansk undervisning",
body: "Hej {{playername}}, velkom til Danmark! Vi kan tilbyde dig en sprogtest og bagefter placerere dig i en tilpasset klasse.\nVi ses p√• tirsdag kl 17:00\nMvh,\nNy i Danmark Hold",
    linkedOpportunityId: "oppo_dansk_01",
    month: 1,
    tags: ["settling", "danish", "august"],
    luckBoost: 0.1,
    danishBoost: 0.2
  }
]>>



:: _groupchat_init {"position":"700,900","size":"100,100"}
<<if $mummessage==true>>
 <<set _msgText = "Hey " + ($momnickname) + ", hope it all went well with the kids' first day. They looked so happy in the picture. I'll call you at the weekend.">>
<<addGroupMessage "Mom" _msgText>>
<<set $mummessage=false>>
<</if>>


:: StoryScript [script]
// ========================
// TIME MANAGEMENT SYSTEM
// ========================

// Time tracking function - core of the time management system
setup.useTime = function(id, time) {
  const v = State.variables;
  v.timeLog = v.timeLog || {};
  v.provisionalTime = v.provisionalTime || 0;
  v.timeBucket = v.timeBucket || 0;

  // If this activity already has time assigned, remove it first
  if (v.timeLog[id]) {
    v.provisionalTime -= v.timeLog[id];
    v.timeBucket -= v.timeLog[id];
  }

  // Add the new time
  v.timeLog[id] = time;
  v.provisionalTime += time;
  v.timeBucket += time;
  
  // Check if we need to advance the month
  if (v.timeBucket >= 1.0) {
    v.advance = true;
  }
  
  console.log(`Time used: ${id}, ${time}, total: ${v.timeBucket}`);
  return v.timeBucket;
};

// Reset Month Helper
setup.resetMonth = function () {
  const v = State.variables;
  v.month = (v.month || 1) + 1;
  v.timeBucket = 0;
  v.provisionalTime = 0;
  v.advance = false;
  v.bujoPlans = [];
  v.bujoOpportunities = [];
  v.kidsPickedUp = false;
  v.changedmind = false;
  v.application_state = "";
  v.newMonthStarted = true;
  v.timeLog = {};
  
  console.log("Month reset to: " + v.month);
};

// ========================
// OPPORTUNITY MANAGEMENT
// ========================

// Fixed Commit Plan function
setup.commitPlan = function(opp) {
  const v = State.variables;
  
  // Initialize variables if they don't exist
  v.bujoPlans = v.bujoPlans || [];
  v.timeBucket = v.timeBucket || 0;
  v.provisionalTime = v.provisionalTime || 0;
  
  // Check if already planned
  const alreadyPlanned = v.bujoPlans.some(p => p.id === opp.id);
  
  // Check if there's enough time
  const hasEnoughTime = v.timeBucket + opp.timeCost <= 1.0;
  
  // Debug output
  console.log(`commitPlan: ${opp.id}, already planned: ${alreadyPlanned}, enough time: ${hasEnoughTime}, current time: ${v.timeBucket}`);
  
  // Only proceed if not already planned and there's enough time
  if (!alreadyPlanned && hasEnoughTime) {
    // Add the plan
    v.bujoPlans.push(opp);
    
    // Use the time
    setup.useTime(opp.id, opp.timeCost);
    
    // Check if month is full
    if (v.timeBucket >= 1.0) {
      v.advance = true;
    }
    
    // Return to BuJo
    Engine.play("BuJo_Regular");
    return true;
  }
  
  return false;
};

// Helper to add opportunity IDs to BuJo invites
setup.addOpportunity = function(id) {
  const opp = State.variables.allOpportunities.find(o => o.id === id);
  if (!opp) return;

  if (!State.variables.bujoOpportunities) {
    State.variables.bujoOpportunities = [];
  }

  const alreadyExists = State.variables.bujoOpportunities.some(p => p.id === opp.id);
  if (!alreadyExists) {
    State.variables.bujoOpportunities.push(opp);
  }
};

// ========================
// JOB HUNTING SYSTEM
// ========================

// Job Hunt Selection function
setup.jobhuntSelect = function(id, time, luck, text) {
  const v = State.variables;
  
  // Initialize if not already
  v.provisionalTime = v.provisionalTime || 0;
  v.timeBucket = v.timeBucket || 0;
  v.timeLog = v.timeLog || {};
  v.luck = v.luck || 0;
  
  // Track changed mind
  const prev = v.application_state;
  if (prev !== "" && prev !== id) {
      v.changedmind = true;
  }

  // Apply luck if appropriate
  if (!v.changedmind && luck > 0) {
      v.luck += luck;
  }

  // Set state
  v.application_state = id;
  v.activities = true;
  v.selectedJobTime = time;
  v.jobMessage = text;

  // Use time (this will handle removing previous time and adding new time)
  setup.useTime("jobhunt", time);
  
  // Log for debugging
  console.log(`Job hunt selection: ${id}, time: ${time}, luck: ${luck}, total time: ${v.timeBucket}`);
};

// Get BuJo intro text based on job hunting selection
setup.getBujoIntro = function(state, changedmind) {
  if (changedmind) {
    return "You have erased some plans carefully. Only a forensics expert could see your previous spread.";
  }

  switch (state) {
    case "ft":
      return "Your BuJo is jacked to the brim with goals and targets. GET A JOB you have underlined five times.";
    case "pt":
      return "You've drawn out a little calendar spread to track your applications.";
    case "vpt":
      return 'You have written "Apply for a job every week" and drawn a picture of you typing on a laptop giving a thumbs up.';
    case "nope":
      return 'You have written Goals: Survive and drawn a little doodle of Katniss Everdeen üèπ';
    case "":
    default:
      return "A brand new Bullet Journal. So much potential in these pages!";
  }
};

// ========================
// MESSAGE SYSTEM
// ========================

// Group Chat Message Macro
Macro.add('addGroupMessage', {
  handler: function () {
    if (this.args.length < 2) {
      return this.error("Expected: sender, content [optional: timestamp]");
    }
    const sender = this.args[0];
    const content = this.args[1];

    if (!Array.isArray(State.variables.groupMessages)) {
      State.variables.groupMessages = [];
    }

    State.variables.groupMessages.push({
      sender: sender,
      content: content,
      seen: false
    });
  }
});

// Initialize empty structures ‚Äî content gets injected from passages
setup.inbox = [];       // Email + system messages go here
setup.instaFeed = [];   // Instagram-like posts go here

// Filter helper ‚Äî get messages by month (if you want to use months)
setup.getMessagesForMonth = function(month) {
  return setup.inbox.filter(msg => msg.month === month);
};

// ========================
// MISC HELPER FUNCTIONS
// ========================

// Low-buff relief check
setup.shouldInjectRelief = function() {
  const buffs = (State.variables.connectedness || 0) + (State.variables.leisure || 0);
  return buffs < 2;
};

// ========================
// MONTH TRANSITION SYSTEM
// ========================

// Generate reflections based on the month's activities
setup.generateMonthReflections = function() {
  const v = State.variables;
  v.monthReflections = v.monthReflections || [];
  
  // Create new reflections for this month
  const newReflections = [];
  
  // Add reflections based on what the player did
  if (v.bujoPlans.length === 0) {
    newReflections.push("I didn't really commit to anything this month. Maybe I need to be more proactive?");
  }
  
  // Job hunting reflections
  if (v.timeLog && v.timeLog["jobhunt"]) {
    const jobTime = v.timeLog["jobhunt"];
    if (jobTime > 0.5) {
      newReflections.push("I spent a lot of time job hunting this month. It's exhausting, but I hope something comes through soon.");
    } else if (jobTime > 0) {
      newReflections.push("I've been sending out job applications. Fingers crossed!");
    }
  }
  
  // Add reflections for each activity
  if (v.bujoPlans) {
    for (const plan of v.bujoPlans) {
      // Generic reflection for each plan type
      if (plan.tags && plan.tags.includes("networking")) {
        newReflections.push("Networking feels awkward, but I met some interesting people.");
      } else if (plan.tags && plan.tags.includes("bureaucracy")) {
        newReflections.push("Dealing with paperwork is never fun, but at least it's done now.");
      } else if (plan.tags && plan.tags.includes("danish")) {
        newReflections.push("Learning Danish is challenging. 'R√∏dgr√∏d med fl√∏de' - I'll get there eventually!");
      }
      
      // Add specific reflections for certain activities
      if (plan.id === "oppo_course_01") {
        newReflections.push("The course was interesting. I wonder if it will actually help me get a job here.");
        v.skills = (v.skills || 0) + 1;
      }
    }
  }
  
  // Add a reflection about luck if applicable
  if (v.luck > 0.5) {
    newReflections.push("I'm feeling more optimistic about things working out here.");
  } else if (v.luck < 0.2) {
    newReflections.push("Sometimes I wonder if moving here was the right decision.");
  }
  
  // Save the reflections
  v.monthReflections = newReflections;
  
  return newReflections;
};

// Start a new month
setup.startNewMonth = function() {
  const v = State.variables;
  const oldMonth = v.month || 1;
  
  // Reset time variables
  v.month = oldMonth + 1;
  v.timeBucket = 0;
  v.provisionalTime = 0;
  v.timeLog = {};
  v.advance = false;
  v.changedmind = false;
  
  // Status for the new month
  v.firstmonth = false;
  v.newMonthStarted = true;
  
  // Update opportunities - some expire, some persist
  setup.updateOpportunities(oldMonth);
  
  // Clear plans but keep reflections
  v.bujoPlans = [];
  
  console.log("Month advanced to: " + v.month);
};

// Update opportunities based on month transition
setup.updateOpportunities = function(oldMonth) {
  const v = State.variables;
  
  // Filter existing opportunities
  if (v.bujoOpportunities && v.bujoOpportunities.length) {
    // Keep only non-time-sensitive opportunities (those without 'expires' or with 'expires' > current month)
    v.bujoOpportunities = v.bujoOpportunities.filter(opp => 
      !opp.expires || opp.expires > v.month
    );
  }
  
  // Add new opportunities based on the month
  const newMonth = oldMonth + 1;
  
  // Example opportunity creation for month 2
  if (newMonth === 2) {
    // Add some month 2 specific opportunities
    const month2Opportunities = [
      {
        id: "oppo_volunteer_01",
        linkId: "volunteer_01",
        label: "Volunteer at the International House",
        timeCost: 0.2,
        prose: "Help newcomers adjust to Denmark",
        tags: ["networking", "opportunity"],
        expires: 3
      },
      {
        id: "oppo_danish_02",
        linkId: "danish_02",
        label: "Join the Danish conversation club",
        timeCost: 0.1,
        prose: "Practice Danish in a casual setting",
        tags: ["danish", "networking", "opportunity"]
      }
    ];
    
    // Add new opportunities that don't already exist
    for (const opp of month2Opportunities) {
      if (!v.bujoOpportunities.some(o => o.id === opp.id)) {
        v.bujoOpportunities.push(opp);
      }
    }
    
    // Also add to the master list if not there already
    for (const opp of month2Opportunities) {
      if (!v.allOpportunities.some(o => o.id === opp.id)) {
        v.allOpportunities.push(opp);
      }
    }
  }
  
  console.log(`Updated opportunities for month ${newMonth}. Total: ${v.bujoOpportunities.length}`);
};

// Remove a plan
setup.removePlan = function(index) {
  const v = State.variables;
  
  if (index >= 0 && index < v.bujoPlans.length) {
    const plan = v.bujoPlans[index];
    
    // Remove the time cost
    if (plan.id && v.timeLog[plan.id]) {
      v.timeBucket -= v.timeLog[plan.id];
      v.provisionalTime -= v.timeLog[plan.id];
      delete v.timeLog[plan.id];
    }
    
    // Remove the plan
    v.bujoPlans.splice(index, 1);
    
    // Check if we need to update the advance state
    if (v.timeBucket < 1.0) {
      v.advance = false;
    }
    
    console.log(`Removed plan: ${plan.label}. New time: ${v.timeBucket}`);
  }
};

:: StoryStylesheet [stylesheet]
.chat-bubble {
  background-color: #E8EEF4;
  color: #000000;
  border-radius: 16px;
  padding: 10px 14px;
  margin: 8px 0;
  max-width: 75%;
  line-height: 1.4;
  font-size: 0.95em;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
}

.chat-bubble strong {
  display: block;
  font-weight: 600;
  margin-bottom: 4px;
  color: #000000;
}

.message-card {
  border: 1px solid #aaa;
  padding: 1em;
  margin: 1em 0;
  border-radius: 5px;
  font-family: system-ui, sans-serif;
  color: #000000;
  background-color: #ffffff;
}

.email {
  background-color: #f9f9ff;
  border-left: 4px solid #3333aa;
  color: #000000;
}

.social {
  background-color: #f0fff0;
  border-left: 4px solid #228822;
  color: #000000;
}

.email-header {
  font-size: 0.9em;
  color: #000000;
  margin-bottom: 0.5em;
}

.social-post {
  font-weight: bold;
  margin-bottom: 0.5em;
  color: #000000;
}

.message-body {
  white-space: pre-wrap;
  color: #000000;
}

.insta-post {
  background-color: #fff;
  color: #000000;
  border: 1px solid #aaa;
  border-radius: 12px;
  padding: 12px;
  margin: 16px 0;
  box-shadow: 0 2px 4px rgba(0,0,0,0.05);
  max-width: 500px;
  font-family: "Helvetica Neue", sans-serif;
}

.insta-author {
  font-weight: bold;
  margin-bottom: 8px;
  color: #000000;
}

.insta-image {
  width: 100%;
  border-radius: 8px;
  margin-bottom: 8px;
}

.insta-caption {
  font-size: 0.95em;
  line-height: 1.4;
  color: #000000;
}

.bujo-page {
  background: #ffffff;
  border: 1px solid #aaa;
  padding: 1.2em;
  margin: 2em 0;
  border-radius: 10px;
  box-shadow: 0 2px 6px rgba(0,0,0,0.05);
}

.bujo-page h3 {
  font-family: 'Georgia', serif;
  font-size: 1.4em;
  margin-bottom: 0.5em;
  color: #000000;
}

.bujo-meta {
  font-weight: bold;
  margin-top: 1em;
  color: #000000;
}

.bujo-reflections {
  margin-top: 1em;
  font-style: italic;
  color: #000000;
}

/* Fade-in animation */
@keyframes fadeInUp {
  0% {
    opacity: 0;
    transform: translateY(10px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

.message-card.social {
  opacity: 0; /* start hidden until timed macro triggers */
  animation: fadeInUp 0.5s ease forwards;
  margin: 1em 0;
  padding: 1em;
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 5px rgba(0,0,0,0.1);
  font-family: system-ui, sans-serif;
  max-width: 500px;
  margin-left: auto;
  margin-right: auto;
  color: #000000;
}

.social-post {
  font-weight: bold;
  margin-bottom: 0.25em;
  color: #000000;
}

.message-body {
  font-size: 0.95em;
  color: #000000;
  line-height: 1.4;
}

/* Time management UI styles */
.time-meter {
  margin: 1em 0;
  padding: 0.5em;
  background: #f9f9f9;
  border-radius: 5px;
  border: 1px solid #aaa;
}

.time-label {
  font-size: 0.9em;
  margin-bottom: 0.3em;
  color: #000000;
}

.time-bar {
  height: 12px;
  background: #ddd;
  border-radius: 6px;
  overflow: hidden;
}

.time-filled {
  height: 100%;
  background: linear-gradient(to right, #1a8a1f, #e6ac00);
  transition: width 0.3s ease;
}

.time-alert {
  margin: 1em 0;
  padding: 1em;
  background: #fff8e1;
  border-left: 4px solid #e6ac00;
  border-radius: 3px;
  color: #000000;
}

.plan-item {
  padding: 0.5em;
  margin: 0.5em 0;
  background: #f5f5f5;
  border-radius: 3px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  color: #000000;
}

.plan-item a {
  color: #c62828;
  font-weight: bold;
  padding: 0 0.5em;
}

.reflection-entry {
  padding: 0.8em;
  margin: 0.8em 0;
  background: #f9f9f9;
  border-left: 3px solid #673ab7;
  font-family: 'Caveat', cursive;
  font-size: 1.1em;
  line-height: 1.4;
  color: #000000;
}

/* Opportunity styles */
.opportunity-item {
  margin: 1em 0;
  padding: 1em;
  background: #f5f5f5;
  border-radius: 5px;
  border-left: 3px solid #1a8a1f;
  color: #000000;
}

.opportunity-item strong {
  display: block;
  margin-bottom: 0.5em;
  color: #000000;
}

.time-cost {
  font-size: 0.9em;
  color: #000000;
  display: block;
  margin-bottom: 0.5em;
}

.already-planned {
  display: inline-block;
  padding: 0.3em 0.6em;
  background: #e8f5e9;
  color: #1b5e20;
  border-radius: 3px;
  font-size: 0.85em;
  font-weight: bold;
}

.too-busy {
  display: inline-block;
  padding: 0.3em 0.6em;
  background: #ffebee;
  color: #b71c1c;
  border-radius: 3px;
  font-size: 0.85em;
  font-weight: bold;
}